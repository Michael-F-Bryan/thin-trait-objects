var searchIndex = JSON.parse('{\
"thin_trait_objects":{"doc":"Proof of concept for creating FFI-safe trait objects in …","i":[[5,"new_file_handle_builder","thin_trait_objects","",null,[[["c_int",6]],["filehandlebuilder",3]]],[3,"FileHandleBuilder","","",null,null],[12,"file_handle","","",0,null],[12,"place","","",0,null],[5,"new_null_file_handle","","Create a new [<code>FileHandle</code>] which throws away all data …",null,[[]]],[5,"new_stdout_file_handle","","Create a new [<code>FileHandle</code>] which writes directly to stdout.",null,[[]]],[5,"new_file_handle_from_path","","Create a new [<code>FileHandle</code>] which will write to a file on …",null,[[]]],[5,"file_handle_destroy","","Free the [<code>FileHandle</code>], calling any destructors and …",null,[[]]],[5,"file_handle_write","","Write some data to the file handle, returning the number …",null,[[["c_int",6]],["c_int",6]]],[5,"file_handle_flush","","Flush this output stream, ensuring that all …",null,[[],["c_int",6]]],[3,"FileHandle","","A FFI-safe version of the trait object, […",null,null],[3,"OwnedFileHandle","","An owned wrapper around a [<code>*mut FileHandle</code>][FileHandle] …",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"drop","","",2,[[]]],[11,"clone","","",1,[[],["filehandle",3]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"write","","",2,[[],["result",6]]],[11,"flush","","",2,[[],["result",6]]],[11,"for_writer","","Create a new [<code>FileHandle</code>] that wraps a Rust […",1,[[]]],[11,"new","","Create a new [<code>OwnedFileHandle</code>] which wraps some [<code>Write</code>]r.",2,[[["send",8],["sync",8],["write",8]]]],[11,"from_raw","","Create an [<code>OwnedFileHandle</code>] from a <code>*mut FileHandle</code>, taking…",2,[[]]],[11,"into_raw","","Consume the [<code>OwnedFileHandle</code>] and get a <code>*mut FileHandle</code> …",2,[[]]],[11,"is","","Check if the object pointed to by a [<code>OwnedFileHandle</code>] has …",2,[[]]],[11,"downcast_ref","","Returns a reference to the boxed value if it is of type <code>T</code>…",2,[[],["option",4]]],[11,"downcast_mut","","Returns a mutable reference to the boxed value if it is …",2,[[],["option",4]]],[11,"downcast","","Attempt to downcast the [<code>OwnedFileHandle</code>] to a concrete …",2,[[],["result",4]]]],"p":[[3,"FileHandleBuilder"],[3,"FileHandle"],[3,"OwnedFileHandle"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);